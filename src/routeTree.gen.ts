/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AdminRouteImport } from "./routes/admin";
import { Route as AdminNewStrikeRouteImport } from "./routes/admin.new-strike";
import { Route as AdminStrikesRouteImport } from "./routes/admin.strikes";
import { Route as AdminUsersRouteImport } from "./routes/admin.users";
import { Route as IndexRouteImport } from "./routes/index";

const AdminRoute = AdminRouteImport.update({
	id: "/admin",
	path: "/admin",
	getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRouteImport,
} as any);
const AdminUsersRoute = AdminUsersRouteImport.update({
	id: "/users",
	path: "/users",
	getParentRoute: () => AdminRoute,
} as any);
const AdminStrikesRoute = AdminStrikesRouteImport.update({
	id: "/strikes",
	path: "/strikes",
	getParentRoute: () => AdminRoute,
} as any);
const AdminNewStrikeRoute = AdminNewStrikeRouteImport.update({
	id: "/new-strike",
	path: "/new-strike",
	getParentRoute: () => AdminRoute,
} as any);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/admin": typeof AdminRouteWithChildren;
	"/admin/new-strike": typeof AdminNewStrikeRoute;
	"/admin/strikes": typeof AdminStrikesRoute;
	"/admin/users": typeof AdminUsersRoute;
}
export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/admin": typeof AdminRouteWithChildren;
	"/admin/new-strike": typeof AdminNewStrikeRoute;
	"/admin/strikes": typeof AdminStrikesRoute;
	"/admin/users": typeof AdminUsersRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/": typeof IndexRoute;
	"/admin": typeof AdminRouteWithChildren;
	"/admin/new-strike": typeof AdminNewStrikeRoute;
	"/admin/strikes": typeof AdminStrikesRoute;
	"/admin/users": typeof AdminUsersRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/"
		| "/admin"
		| "/admin/new-strike"
		| "/admin/strikes"
		| "/admin/users";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/admin" | "/admin/new-strike" | "/admin/strikes" | "/admin/users";
	id:
		| "__root__"
		| "/"
		| "/admin"
		| "/admin/new-strike"
		| "/admin/strikes"
		| "/admin/users";
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AdminRoute: typeof AdminRouteWithChildren;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/admin": {
			id: "/admin";
			path: "/admin";
			fullPath: "/admin";
			preLoaderRoute: typeof AdminRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/admin/users": {
			id: "/admin/users";
			path: "/users";
			fullPath: "/admin/users";
			preLoaderRoute: typeof AdminUsersRouteImport;
			parentRoute: typeof AdminRoute;
		};
		"/admin/strikes": {
			id: "/admin/strikes";
			path: "/strikes";
			fullPath: "/admin/strikes";
			preLoaderRoute: typeof AdminStrikesRouteImport;
			parentRoute: typeof AdminRoute;
		};
		"/admin/new-strike": {
			id: "/admin/new-strike";
			path: "/new-strike";
			fullPath: "/admin/new-strike";
			preLoaderRoute: typeof AdminNewStrikeRouteImport;
			parentRoute: typeof AdminRoute;
		};
	}
}

interface AdminRouteChildren {
	AdminNewStrikeRoute: typeof AdminNewStrikeRoute;
	AdminStrikesRoute: typeof AdminStrikesRoute;
	AdminUsersRoute: typeof AdminUsersRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
	AdminNewStrikeRoute: AdminNewStrikeRoute,
	AdminStrikesRoute: AdminStrikesRoute,
	AdminUsersRoute: AdminUsersRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AdminRoute: AdminRouteWithChildren,
};
export const routeTree = rootRouteImport
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();
